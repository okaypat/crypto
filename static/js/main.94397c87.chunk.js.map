{"version":3,"sources":["components/Coin.js","App.js","reportWebVitals.js","index.js"],"names":["Coin","name","image","symbol","price","volume","priceChange","marketcap","className","src","alt","toLocaleString","toFixed","App","useState","coins","setCoins","search","setSearch","sorting","setSorting","useEffect","axios","get","then","info","data","catch","error","alert","filteredCoins","filter","coin","toLowerCase","includes","sortCoins","proprety","newArr","orderedArr","sort","a","b","reverse","calssName","type","placeholder","onChange","e","target","value","onClick","map","market_cap","current_price","price_change_percentage_24h","total_volume","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94397c87.chunk.js","sourcesContent":["import React from \"react\";\nimport './Coin.css';\n\nconst Coin = ({name, image, symbol, price, volume, priceChange, marketcap}) => {\n    return (\n    \n        <div className='coin-containter'>\n            <div className='coin-row'>\n                <div className='coin'>\n                    <img src={image} alt=\"currency\"/>\n                    <h1>{name}</h1>\n                    <p className='coin-symbol'>{symbol}</p>\n                </div>\n                <div className='coin-data'>\n                <p className='coin-price'>${price.toLocaleString()}</p>\n                <p className='coin-volume'>{volume.toLocaleString()}</p>\n                {priceChange < 0 ?  (\n                    <p className='coin-percent red'>{priceChange.toFixed(2)}%</p>\n                    ) : (\n                    <p className='coin-percent green'>{priceChange.toFixed(2)}%</p>\n                    )}\n                <p className='coin-marketcap'>${marketcap.toLocaleString()}\n                </p>       \n                </div>\n             </div>\n        </div>\n    )\n}\n\nexport default Coin","\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport reactDom from 'react-dom';\nimport Coin from './components/Coin'\nimport Navbar from './components/Navbar';\n\n\nfunction App() {\n const [coins, setCoins] = useState([]);\n const [search, setSearch] = useState ('');\n const [sorting, setSorting] = useState (true);\n\n\n  useEffect(() => {\n    axios.get('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false')\n    .then(info => {\n      setCoins(info.data);\n    }).catch(error => alert ('Error'));\n  }, []);\n\n  const searchName = e => {\n    setSearch (e.target.value)\n  }\n\n  const filteredCoins = coins.filter(coin => \n    coin.name.toLowerCase().includes(search.toLowerCase())\n    )\n\n  \n  //   const sortMarket = () => {    ---> used this before repeating for every propety type (volume, name, price, etc) -- figured out a way to do 1 function only\n  //     let newArr = [...coins];\n  //     if (sorting === true){\n  //     let orderedArr = newArr.sort((a, b) => {\n  //       if (a.market_cap < b.market_cap) {\n  //         return -1;\n  //       }\n  //       if (a.market_cap > b.market_cap) {\n  //         return 1;\n  //       }\n  //       return 0;\n  //     });\n  //     setCoins(orderedArr);\n  //     setSorting(false);\n  //   } else {\n  //     let orderedArr = newArr.sort((a, b) => {\n  //       if (a.market_cap < b.market_cap) {\n  //         return -1;\n  //       }\n  //       if (a.market_cap > b.market_cap) {\n  //         return 1;\n  //       }\n  //       return 0;\n  //     });\n  //     setCoins(orderedArr.reverse());\n  //     setSorting(true);\n  //   }\n  // }\n\n  const sortCoins = (proprety) => {\n    let newArr = [...coins];\n    if (sorting === true){\n    let orderedArr = newArr.sort((a, b) => {\n      if (a[proprety] < b[proprety]) {\n        return -1;\n      }\n      if (a[proprety] > b[proprety]) {\n        return 1;\n      }\n      return 0;\n    });\n    setCoins(orderedArr);\n    setSorting(false);\n  } else {\n    let orderedArr = newArr.sort((a, b) => {\n      if (a[proprety] < b[proprety]) {\n        //because we searching by string\n        return -1;\n      }\n      if (a[proprety] > b[proprety]) {\n        return 1;\n      }\n      return 0;\n    });\n    setCoins(orderedArr.reverse());\n    setSorting(true);\n  }\n} \n\n  //* <button onClick={sortName} type='button' className='btn'>Name</button> -- did this originally, but it had to be a diff function every time  */\n\n  return (\n    <div className=\"coin-app\">\n      <div calssName='coin-search'>\n        <h1 className='coin-text'> CRYPTO GODS</h1>\n        <h2 className='coin-subtext'>Check your crypto bag here ðŸš€ðŸš€ðŸš€</h2>\n        <form>\n          <input type=\"text\" placeholder=\"Search\" \n          className=\"coin-input\" onChange={searchName}/>\n        </form>\n      </div>\n      <div className='header-cointainer'>\n      <div className='header-row'>\n        <button onClick={()=> sortCoins('name')} type='button' className='btn'>Name</button>\n        <button onClick={()=> sortCoins('symbol')} type='button' className='btn'>Symbol</button>\n        <button onClick={()=> sortCoins('current_price')} type='button' className='btn'>Price</button>\n        <button onClick={()=> sortCoins('total_volume')} type='button' className='btn'>Volume</button>\n        <button onClick={()=> sortCoins('price_change_percentage_24h')} type='button' className='btn'>24h Change %</button>\n        <button onClick={()=> sortCoins('market_cap')} type='button' className='btn'>Market Cap</button>\n        </div>\n        </div>\n        {filteredCoins.map(coin => {\n          return (\n            <Coin \n            key={coin.id} \n            name={coin.name} \n            image={coin.image}\n            symbol={coin.symbol}\n            marketcap={coin.market_cap}\n            price={coin.current_price}\n            priceChange={coin.price_change_percentage_24h}\n            volume={coin.total_volume}\n            />\n          )\n        })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}